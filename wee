#!/usr/bin/env bash

usage()
{
	local name="$(basename $0)"
	cat <<EOF
wee - creates and manages project environment.
Usage:
  $name create                         -> Creates wee environment setup for current project; 'y' enables basic helpers by default
  $name destroy                        -> Destroy existing wee environment management setup from current project
  $name show                           -> show env, startup/cleanup commands, aliases and function names defined for this project
  $name env <add|del> <var> [value]    -> Add or delete an environment variable
  $name start <add|del> [cmd]          -> Add or delete a project-entry-time command
  $name clean <add|del> [cmd]          -> Add or delete a project-exit-time command
  $name alias <add|del> <name> [cmd]   -> Add or delete a bash alias command
  $name func <add|del> <name>          -> Add or delete a bash function
                                          NOTE: test function body before adding (debugging functions in wee may be time-consuming)

EOF
	exit $1
}

[[ $# -lt 1 ]] && usage 0

PROJECT_DIR="$(pwd)"
MISE_TOML="$PROJECT_DIR/.mise.toml"
SETUP="$PROJECT_DIR/.misein.sh"
CLEANUP="$PROJECT_DIR/.miseout.sh"

wee-create()
{
	[[ -f $MISE_TOML ]] && return 0

	cp "$HOME/.config/mise/wee-template.toml" "$MISE_TOML" || exit 0
	sed -i "s|.misein.sh|${PROJECT_DIR}/.misein.sh|" "$MISE_TOML"
	sed -i "s|.miseout.sh|${PROJECT_DIR}/.miseout.sh|" "$MISE_TOML"
	echo '# Project setup' > "$SETUP"
	echo '# Project cleanup' > "$CLEANUP"

	[ ! -d ".git" ] && return 0
	echo "git status -sb" >> "$SETUP"

	mise trust 2>/dev/null

	echo "Created wee configuration"

	return 0
}

wee-destroy()
{
	rm -rf "$MISE_TOML" "$SETUP" "$CLEANUP"
	return 0
}

wee-show()
{
	reload=false
	[ ! -f "$MISE_TOML" ] && echo "wee is not setup for $PROJECT_DIR" && return 0

	local data=$(mise env | grep -v "export PATH")
	[ -n "$data" ] && echo -e "\n--------- env:\n$data"

	if [[ -f $SETUP ]]; then
		local data=$(grep '^alias ' "$SETUP")
		[ -n "$data" ] && echo -e "\n--------- aliases:\n$data"
		local data=$(grep -E '^[a-zA-Z0-9_-]+\(\)' "$SETUP")
		[ -n "$data" ] && echo -e "\n--------- functions:\n$data"
		local data=$(grep " #cmd[0-9]\+" "$SETUP")
		[ -n "$data" ] && echo -e "\n--------- startup:\n$data"
		local data=$(grep " #cmd[0-9]\+" "$CLEANUP")
		[ -n "$data" ] && echo -e "\n--------- cleanup:\n$data"
	fi

	echo ""
	return 0
}

wee-env()
{
	reload=false
	[[ $# -lt 2 ]] && echo "Need environment variable setup arguments!" && return -1

	case $1 in
		add)
			(mise env | grep "^export $2=") && echo "variable '$2' already defined!" && return 0
			local name=$2; shift 2; local value=$*
			[ -z "$value" ] && echo "Need value for env variable $name!" && return -3
			! mise set "$name=$value" && echo "Failed to set env: $kv"
			;;
		del)
			mise unset "$2"
			;;
		*)
			echo "Expected argument: 'add' or 'del'. Given: $1"
			return -2
			;;
	esac

	return 0
}

_wee_startup_cleanup_common()
{
	[[ $# -lt 2 ]] && echo "Need ${1} command setup arguments!" && return -1

	local type=$1
	local op=$2
	[[ "$type" == "start" ]] && local file="$SETUP" || local file="$CLEANUP"
	local cmd 

	case $op in
		add)
			shift 2
			cmd="$*"
			[ -z "$cmd" ] && echo "Need $type-up command (plus arguments if needed)" && return -2
			local cmdID=$(grep '#cmd[0-9]\+' "$file" | grep -o '[0-9]\+' | sort -n | tail -n1)
			((cmdID++))
			echo "$cmd #cmd${cmdID}" >> "$file"
			;;
		del)
			PS3="Select a command by index to delete: "
			mapfile -t options < <(grep '#cmd' "$file")
			select cmd in "${options[@]}"; do
				[[ -z "$cmd" ]] && echo "Invalid selection. Try again!" && continue
				local cmdID=$(echo "$cmd" | awk '{print $NF}')
				sed -i "/$cmdID/d" "$file"
				break
			done
			unset options
			;;
		*)
			echo "Unknown option for wee $type: $op"
			return -3
			;;
	esac

	return 0
}

wee-start()
{
	_wee_startup_cleanup_common start "${@}"
	return $?
}

wee-clean()
{
	_wee_startup_cleanup_common clean "${@}"
	return $?
}

wee-alias()
{
	[[ $# -lt 2 ]] && echo "Need alias setup arguments!" && return -1

	case $1 in
		add)
			local name="$2"; shift 2; local cmd="$*"
			grep -E "^alias $name=" "$SETUP" 2>/dev/null && echo "alias $name already defined!" && return 0
			echo "alias $name='$cmd'" >> "$SETUP"
			echo "unalias $name 2>/dev/null" >> "$CLEANUP"
			;;
		del)
			sed -i "/^alias $2=/d" "$SETUP"
			sed -i "/^unalias $2/d" "$CLEANUP"
			echo "unalias $2" > /tmp/rewee-cmd
			;;
		*)
			echo "Expected argument: 'add' or 'del'. Given: $1"
			return -2
			;;
	esac

	return 0
}

wee-func()
{
	[[ $# -lt 2 ]] && echo "Need func setup arguments!" && return -1

	case $1 in
		add)
			grep -qE "^$2\\(\\)" "$SETUP" 2>/dev/null && echo "function $2 already defined!" && return 0
			echo "Enter function body then Ctrl-D:"
			local body_content=$(cat)
			echo -e "$2()\n{\n$body_content\n}" >> "$SETUP"
			echo "unset -f $2" >> "$CLEANUP"
			;;
		del)
			sed -i "/^$2()/,/^}/d" "$SETUP"
			sed -i "/^unset -f $2$/d" "$CLEANUP"
			echo "unset -f $2" > /tmp/rewee-cmd
			;;
		*)
			echo "Expected argument: 'add' or 'del'. Given: $1"
			return -2
			;;
	esac

	return 0
}

! declare -F "wee-$1" >/dev/null && echo "Unknown option: $1" && usage -2

if [ "$1" != "create" ] && [ ! -f "$MISE_TOML" ]; then
	echo -e "Create wee configuration first with:\nwee create"
	exit 0
fi

reload=true
cmd=$1; shift
"wee-$cmd" "$@" || usage $?
$reload && echo -e "Run 'rewee' to reload environment immediately"

exit 0
